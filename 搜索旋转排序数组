‘’‘
假设按照升序排序的数组在预先未知的某个点上进行了旋转。
( 例如，数组 [0,0,1,2,2,5,6] 可能变为 [2,5,6,0,0,1,2] )。
编写一个函数来判断给定的目标值是否存在于数组中。若存在返回 true，否则返回 false。
解题思路：
运用二分查找(去掉干扰项)，先取中点，然后判断是前半部分有序还是后半部分有序，再判断目标数字是否在有序部分里，从而去掉一半干扰项
’‘’
class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: bool
        """
        if nums is None:
            return False
        slen = len(nums)
        if slen == 0:
            return False
        start = 0
        end = slen - 1
        while start <= end:
            mid = (start + end)/2
            if nums[mid] == target:
                return True
            #如果有重复，则判断不了前半部分有序还是后半部分有序，因此将start++去掉一个干扰项
            if nums[start] == nums[mid]:
                start += 1
            #前半部分有序
            elif nums[start] < nums[mid]:
                #在有序部分进行比较
                if nums[start] <= target and target < nums[mid]:
                    end = mid - 1
                else:
                    start = mid + 1
            #后半部分有序
            else:
                #在有序部分进行比较
                if nums[mid] < target and target <= nums[end]:
                    start = mid + 1
                else:
                    end = mid - 1
        return False
